<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns="lse.math.games.builder.view.*"
			   backgroundColor="0xB7BABC" minWidth="692">
	
	<fx:Script>
		<![CDATA[		
			import flash.utils.clearTimeout;
			import flash.utils.getTimer;
			import flash.utils.setTimeout;
			
			import lse.math.games.builder.io.FileManager;
			import lse.math.games.builder.settings.SCodes;
			import lse.math.games.builder.settings.Settings;
			import lse.math.games.builder.settings.UserSettings;
			
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.managers.PopUpManager;
			import mx.utils.OrderedObject;
			import mx.utils.StringUtil;
			
			import util.EvCodes;
			import util.EventManager;
			import util.Log;
			import util.PromptTwoButtons;
						
			[Bindable]
			public var seed:String;
			
			[Bindable]
			public var nfalgos:Array = new Array();
			
			[Bindable]
			public var xfalgos:Array = new Array();
			
			//TODO: If possible, move the folowing two to the <fx:declaration>
			[Bindable]
			private var log:Log = Log.instance;
			
			[Bindable]
			//if moved to declarations, erase the 'added' property in 'filename' textbox 
			private var fileManager:FileManager; 
			
			private var eventManager:EventManager = EventManager.instance;
			private var settings:UserSettings = UserSettings.instance;
			

			
			private function initVars():void 
			{			
				// FOR TESTING ONLY... comment this and uncomment one below before building for prod
				//var flashvars:Object = {
				//	menum: "label=Lrs Find All Eq;toolTip=Lrs Find All Equilibria;type=nf;url=http://localhost:8888/matrix/",
				//	msolve: "label=Lemke Find Eq;toolTip=Lemke Find One Equilibrium;type=nf;url=http://localhost:8888/matrix/",   
				//	xsolve: "label=Lemke Find Eq;toolTip=Lemke Find One Equilibrium (Sequence Form);type=xf;url=http://localhost:8888/tree/"
				//};
				var flashvars:Object = FlexGlobals.topLevelApplication.parameters;
				for (var param:String in flashvars) {
					if (param == "seed") {
						seed = StringUtil.trim(flashvars[param]);
					} else {
						//Alert.show("'" + param + "'='" + flashvars[param] + "'");
						// TODO: use XMLListCollection and pass in XML to load and use instead of this homemade parsing
						var pvalue:String = StringUtil.trim(flashvars[param]);				
						var o:Object = new Object();
						o.uid = param;
						
						for each (var pair:String in pvalue.split(";")) {
							var keyvalue:Array = pair.split("=");
							var key:String = StringUtil.trim(keyvalue[0]);
							var value:String = StringUtil.trim(keyvalue[1]);
							o[key] = value;
							//Alert.show("'" + key + "'='" + o[key] + "'");
						}
						o.service = httpService;
						
						if (o["type"] == "nf") {
							nfalgos.push(o);
						} else if (o["type"] == "xf") {
							xfalgos.push(o);
						} /*else {
						trace("Unrecognized type");
						}*/
					}
				}
			}
			
			// Handles click on the canvas
			private function handleClickOnCanvas():void
			{
				if(opModeBar2.selectedIndex <= 7)
					controller.doActionAt(canvas.mouseX, canvas.mouseY);
				else
					treePainter.selectAndEdit(controller, canvas.mouseX, canvas.mouseY);
			}
			
			
			
			/* <--- ---  TOOLBARS-RELATED FUNCTIONS --- ---> */
			
			//Pops up the settings edition window
			private function showSettings():void
			{
				var s:Settings = new Settings();
				s.controller = controller;
				PopUpManager.addPopUp(s, this, true);
				PopUpManager.centerPopUp(s);
			}				
			
			//Pops up the -internal or external- output window
			private function showOutput(text:String):void {
				if (ExternalInterface.available && !settings.getValue(SCodes.DISPLAY_OUTPUT_INTERNALLY) as Boolean) {
					ExternalInterface.call('writeSolution', text);
					log.add(Log.HINT, "You don't see the output? Then you must allow popups " +
						"in your browser. Don't forget to save your changes before. Or you could " +
						"activate the 'Display output internally' setting in the Settings panel.");
				}
				else {
						var o:OutputWindow = new OutputWindow();
						PopUpManager.addPopUp(o, this, false);
						PopUpManager.centerPopUp(o);
						o.height = canvas.height-50;
						o.setText(text);
				}
			}
			
			//Return the action corresponding to the button pressed in opModeBar2
			private function getClickCallback(idx:int):Function 
			{
				//First disable pan tool if it is running
				if(scrollbar.mouseScrollingEnabled)
					scrollbar.disableMouseScrolling();
				
				switch (idx) {
					case 0: return actions.addChild;
					case 1: return actions.deleteNode;
					case 2: return actions.cutIset;
					case 3: return actions.dissolveIset;
					case 4: return actions.mergeIsets;	
					case 5: return actions.changePlayer;							
					case 6: return actions.makeChance;	
					case 7: scrollbar.enableMouseScrolling();
						return actions.nullAction;
					case 8: return actions.nullAction;
				}
				throw new Error("callback for index " + idx + " not found");
			}
			
			// Changes orientation of the tree
			private function changeOrientation(orientation:int):void
			{
				switch(orientation)
				{
					case 0:
						controller.doAction(actions.orientationUp);
						break;
					case 1:
						controller.doAction(actions.orientationDown);
						break;
					case 2:
						controller.doAction(actions.orientationLeft);
						break;
					case 3:
						controller.doAction(actions.orientationRight);
						break;
				}
			}
			
			//Executes the clear() function from the TreeGridController, epending on the button pressed as a result of the prompt
			private function clearDependingOnPromptResult():void
			{
				if(PromptTwoButtons.buttonPressed == PromptTwoButtons.OK)
					controller.clear();
			}
			
			
			
			/* <--- --- LOGLINE-RELATED FUNCTIONS --- ---> */
			
			//Registers a listener for HINTs added to Log, which will call updateHint
			private function initLogLineListener():void
			{
				eventManager.addEventListener(EvCodes.HINT_ADDED, updateLogLine);
			}
			
			private var lastLogLineTimeoutId:int = -1;
			
			//Updates the LogLine with the text from
			private function updateLogLine(evt:TextEvent):void
			{
				logLine.text = evt.text;
				if(lastLogLineTimeoutId != -1)
					clearTimeout(lastLogLineTimeoutId);
				
				var optimalMsForReading:int = Math.max(3000, 1000+evt.text.length*67); 
				//These ms are calculated from average lowest reading speed in english (200 wpm)
				//and average of letters per word in english (4.5), plus two extra sources of extra
				//time: counting the non-letter characters as letters, and giving one sec at the start for noticing
				//there is something written.
				
				lastLogLineTimeoutId = setTimeout(clearLogLine, optimalMsForReading);
			}
			
			//Erases the logLine text
			private function clearLogLine():void {
				lastLogLineTimeoutId = -1;
				logLine.text = "";
			}
			
			
			
			/* <--- --- KEYBOARD EVENT HANDLERS --- ---> */
			private var opModeBar2lastSelectedIdx:int = 0;
			
			//Shortcuts when key is pressed
			protected function sc_keyDownHandler(event:KeyboardEvent):void
			{
				var ctrl:Boolean = event.ctrlKey;
				var tab:String = tabNavigator.selectedChild.label;
				
				switch(event.keyCode)
				{
					case Keyboard.SPACE:
						//TODO: DEBUG, it is not working properly
						if(tab == "Extensive Form")
						{
							scrollbar.enableMouseScrolling();
							opModeBar2lastSelectedIdx = opModeBar2.selectedIndex; 
							opModeBar2.selectedIndex = 7;
						}
						else if(tab == "Strategic Form")
							scrollbarNF.enableMouseScrolling();
						break;
				}
			}
			
			//Shortcuts when key is released
			protected function sc_keyUpHandler(event:KeyboardEvent):void
			{
				var ctrl:Boolean = event.ctrlKey;
				var shift:Boolean = event.shiftKey;
				var tab:String = tabNavigator.selectedChild.label;
				
				switch(event.keyCode)
				{
					case Keyboard.SPACE:
						if(tab == "Extensive Form" && opModeBar2lastSelectedIdx != 7)
						{
							//Although we've released spacebar, we need to check this
							scrollbar.disableMouseScrolling();
							opModeBar2.selectedIndex = opModeBar2lastSelectedIdx;
						}
						else if(tab == "Strategic Form")
							scrollbarNF.disableMouseScrolling();
						break;
					case 67: //'c'
						if(ctrl) PromptTwoButtons.show(clearDependingOnPromptResult, "Are you really sure you want to clear the game?");
						break;
					case 76: //'l'
						if(ctrl) controller.zoomAdjust();
						else
						{
							if(shift) controller.zoomIn();
							else controller.zoomOut();
						}
								
						break;						
					case 79: //'o'
						if(ctrl) controller.open();
						break;
					case 83: //'s'
						if(ctrl) controller.save();
						break;
					case 82: //'r'
						if(ctrl) controller.runAlgorithm(algoComboBox.selectedItem, seed);
						break;
					case 90: //'z'
						if(ctrl) 
						{
							if(shift)
								controller.redo();
							else
								controller.undo();
						}
						break;
				}
			}
		]]>
	</fx:Script>
	
	<!-- TODO: only cornerRadius seems to be working? -->
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		.myButton {
			cornerRadius:0;
		}
		.mxTabLabels {
			textFieldClass: ClassReference("mx.core.UIFTETextField");
			fontFamily: Helvetica;
			fontWeight: bold;			
		}
	</fx:Style>
	
	<fx:Declarations>
		<mx:HTTPService id="httpService"
						concurrency="single"		 
						method="POST"		 
						resultFormat="text"
						showBusyCursor="true"
						fault="log.add(Log.ERROR, event.fault.faultCode + ':' + event.fault.faultString + ':' + event.fault.faultDetail)"
						result="showOutput(event.result as String);"
						/>
		<TreeGrid id="grid" xmlns="lse.math.games.builder.viewmodel.*" />
		<PainterChain id="treePainter" xmlns="lse.math.games.builder.view.*">
			<links>
				<fx:Vector type="lse.math.games.builder.view.IPainter">
					<TreeGridPainter xmlns="lse.math.games.builder.viewmodel.*" grid="{grid}" />
					<TreeGridSetPainter xmlns="lse.math.games.builder.viewmodel.*" grid="{grid}" />
				</fx:Vector>
			</links>
		</PainterChain>
		<TreeGridActionFactory id="actions" xmlns="lse.math.games.builder.viewmodel.*" />		
		<MatrixPainter id="matrixPainter" xmlns="lse.math.games.builder.viewmodel.*" grid="{grid}" />
		<TreeGridPresenter id="controller" xmlns="lse.math.games.builder.presenter.*" grid="{grid}" getDataUpdateAction="actions.outcomeDataUpdate" />
	</fx:Declarations>
	
	<s:Group left="0" right="0" top="0" bottom="0" >
		<s:BorderContainer top="30" bottom="18" left="0" right="185" backgroundColor="0xe0e0e0" backgroundAlpha="1" borderColor="0x808080" keyDown="sc_keyDownHandler(event)" keyUp="sc_keyUpHandler(event)">
			<mx:TabNavigator id="tabNavigator" tabHeight="22" top="3" bottom="-1" left="-1" right="-1" depth="2"  tabOffset="5" paddingTop="0" backgroundColor="0xffffff" tabStyleName="mxTabLabels" change="controller.canvas = event.target.selectedIndex == 0 ? canvas : canvasNF; algos.source = event.target.selectedIndex == 0 ? xfalgos : nfalgos; algoComboBox.selectedIndex = 0;">
				<s:NavigatorContent label="Extensive Form">
					<MouseScroller id="scrollbar" width="100%" height="100%">
						<s:Group id="viewport" width="100%" height="100%">
							<Canvas id="canvas" width="100%" height="100%" click="handleClickOnCanvas()" painter="{treePainter}" preinitialize="controller.canvas = canvas;" />
						</s:Group>
					</MouseScroller>
					
					<s:Label id="info" top="5" right="{scrollbar.verticalScrollBar.visible ? 20 : 5}" fontFamily="Helvetica" text="{int(canvas.width)} x {int(canvas.height)} ({int(treePainter.scale * 100)}%)" />
					
					<s:HGroup gap="-1" left="283" right="0" top="-21" depth="3" verticalAlign="bottom" clipAndEnableScrolling="true">
						<mx:ToggleButtonBar id="opModeBar2" buttonHeight="21" buttonWidth="23" buttonStyleName="myButton" firstButtonStyleName="myButton" lastButtonStyleName="myButton" selectedIndex="0" creationComplete="controller.getClickAction = getClickCallback(opModeBar2.selectedIndex)" valueCommit="controller.getClickAction = getClickCallback(opModeBar2.selectedIndex);">
							<mx:dataProvider>					
								<mx:ArrayCollection>
									<mx:source>
										<fx:Object icon="@Embed(source='../../../../../../assets/icons/add.png')" toolTip="Add Child" /> 
										<fx:Object icon="@Embed(source='../../../../../../assets/icons/delete.png')" toolTip="Delete Node" /> 
										<fx:Object icon="@Embed(source='../../../../../../assets/icons/cut_red.png')" toolTip="Cut Iset" /> 
										<fx:Object icon="@Embed(source='../../../../../../assets/icons/link_break.png')" toolTip="Dissolve Iset" /> 
										<fx:Object icon="@Embed(source='../../../../../../assets/icons/link.png')" toolTip="Merge Isets" /> 
										<fx:Object icon="@Embed(source='../../../../../../assets/icons/user_go.png')" toolTip="Change Player" /> 
										<fx:Object icon="@Embed(source='../../../../../../assets/icons/user_delete.png')" toolTip="Make Chance" />
										<fx:Object icon="@Embed(source='../../../../../../assets/icons/pan_tool.png')" toolTip="Pan Tool [SpaceBar]" />
										<fx:Object icon="@Embed(source='../../../../../../assets/icons/cursor.png')" toolTip="Selection Tool" /> 
									</mx:source>
								</mx:ArrayCollection>
							</mx:dataProvider>
						</mx:ToggleButtonBar>
						<mx:Spacer width="20" />
						<mx:ToggleButtonBar id="orientationBar" buttonHeight="21" buttonWidth="23" buttonStyleName="myButton" firstButtonStyleName="myButton" lastButtonStyleName="myButton" selectedIndex="0" valueCommit="changeOrientation(orientationBar.selectedIndex)">
							<mx:dataProvider>	
								<mx:ArrayCollection>
									<mx:source>
										<fx:Object icon="@Embed(source='../../../../../../assets/icons/orientation_up.png')" toolTip="Orientation: Root on top"/>
										<fx:Object icon="@Embed(source='../../../../../../assets/icons/orientation_down.png')" toolTip="Orientation: Root on bottom"/>
										<fx:Object icon="@Embed(source='../../../../../../assets/icons/orientation_left.png')" toolTip="Orientation: Root at left"/>
										<fx:Object icon="@Embed(source='../../../../../../assets/icons/orientation_right.png')" toolTip="Orientation: Root at right"/>
									</mx:source>
								</mx:ArrayCollection>
							</mx:dataProvider>
						</mx:ToggleButtonBar>
					</s:HGroup>					
					
				</s:NavigatorContent>
				<s:NavigatorContent label="Strategic Form">
					<MouseScroller id="scrollbarNF" width="100%" height="100%">
						<s:Group id="viewportNF" width="100%" height="100%">
							<Canvas id="canvasNF" width="100%" height="100%" painter="{matrixPainter}" />
						</s:Group>
					</MouseScroller>
					
					<s:Label id="infoNF" top="5" right="{scrollbarNF.verticalScrollBar.visible ? 20 : 5}" fontFamily="Helvetica" text="{int(canvasNF.width)} x {int(canvasNF.height)} ({int(matrixPainter.scale * 100)}%)" />
					
					<s:HGroup gap="-1" left="283" right="0" top="-21" depth="3" verticalAlign="bottom" clipAndEnableScrolling="true">
						<mx:ToggleButtonBar id="nfReducedBar" buttonHeight="21" buttonWidth="23" buttonStyleName="myButton" firstButtonStyleName="myButton" lastButtonStyleName="myButton" selectedIndex="0" valueCommit="controller.isNormalReduced = (event.target.selectedIndex == 0);">
							<mx:dataProvider>					
								<mx:ArrayCollection>
									<mx:source>
										<fx:Object icon="@Embed(source='../../../../../../assets/icons/arrow_in.png')" toolTip="Reduced Strategic Form" /> 
										<fx:Object icon="@Embed(source='../../../../../../assets/icons/arrow_out.png')" toolTip="Full Strategic Form" /> 										
									</mx:source>
								</mx:ArrayCollection>
							</mx:dataProvider>
						</mx:ToggleButtonBar>
						<mx:Button cornerRadius="0" width="23" height="21" icon="@Embed(source='../../../../../../assets/icons/table_edit.png')" toolTip="Edit matrixes" />
						<mx:Spacer width="23"/>
						<mx:Button cornerRadius="0" width="23" height="21" icon="@Embed(source='../../../../../../assets/icons/pan_tool.png')" toolTip="Pan Tool {scrollbarNF.mouseScrollingEnabled ? 'ON' : 'OFF'}" toggle="true" selected="{scrollbarNF.mouseScrollingEnabled}" change="if(scrollbarNF.mouseScrollingEnabled) scrollbarNF.disableMouseScrolling(); else scrollbarNF.enableMouseScrolling()" />

					</s:HGroup>
				</s:NavigatorContent>					
			</mx:TabNavigator>
		</s:BorderContainer>
		
		<mx:DataGrid id="leaves" dataProvider="{controller.outcomeData}" bottom="18" top="30" right="0" width="180" editable="true" borderColor="0x808080" draggableColumns="false" sortableColumns="false" change="controller.selectedNode = (leaves.selectedItem != null ? leaves.selectedItem.uid : -1);" focusOut="controller.selectedNode = -1" focusIn="controller.selectedNode = (leaves.selectedItem != null ? leaves.selectedItem.uid : -1);">
			<mx:columns>
				<mx:DataGridColumn headerText="Sequence" dataField="leaf" width="110" editable="true"/>				
				<mx:DataGridColumn headerText="{controller.player1Name}" dataField="pay1" width="33" editable="true" />
				<mx:DataGridColumn headerText="{controller.player2Name}" dataField="pay2" width="33" editable="{!controller.isZeroSum}"/>
			</mx:columns>
		</mx:DataGrid>
		
		<s:Label id="logLine" bottom="2" left="5" fontSize="11" text="" creationComplete="initLogLineListener();" color="#434546"/>
		
		<s:HGroup left="0" height="30" top="0" paddingTop="3" gap="-1" right="0" clipAndEnableScrolling="true" keyDown="sc_keyDownHandler(event)" keyUp="sc_keyUpHandler(event)">
			<mx:Button cornerRadius="0" width="23" height="24" icon="@Embed(source='../../../../../../assets/icons/page_white.png')" toolTip="Clear [Ctrl+c]" click="PromptTwoButtons.show(clearDependingOnPromptResult, 'Are you really sure you want to clear the game?');" />
			<mx:Button cornerRadius="0" width="23" height="24" icon="@Embed(source='../../../../../../assets/icons/folder_page.png')" toolTip="Open [Ctrl+o]" click="controller.open()" />	
			<mx:Button cornerRadius="0" width="23" height="24" icon="@Embed(source='../../../../../../assets/icons/page_save.png')" toolTip="Save [Ctrl+s]" click="controller.save()" />	
			<mx:Button cornerRadius="0" width="23" height="24" icon="@Embed(source='../../../../../../assets/icons/page_white_picture.png')" toolTip="Export As PNG File" click="controller.image()" />			
			<mx:Button cornerRadius="0" width="23" height="24" icon="@Embed(source='../../../../../../assets/icons/page_white_vector.png')" toolTip="Export As FIG File" click="controller.fig()" />

			<mx:Spacer width="23" />
			<mx:TextInput id="filename" width="100" height="24" enabled="false" added="fileManager = controller.fileManager;"
						  click="filename.enabled=true;" focusOut="filename.enabled=false; if(filename.text.length>0) fileManager.filename= filename.text; else filename.text = fileManager.filename" 
						  text="{fileManager.filename}" keyUp="if(event.keyCode == Keyboard.ENTER) controller.canvas.setFocus(); event.stopPropagation()" keyDown="event.stopPropagation()" 
						  borderVisible="false" color="#EEEEEE" contentBackgroundColor="#B6BABD" disabledColor="#000000"/>
			<mx:Spacer width="23"/>
			<mx:Button cornerRadius="0" width="23" height="24" icon="@Embed(source='../../../../../../assets/icons/cog_go.png')" toolTip="Run [Ctrl+r] - Needs PopUps allowed in your browser" click="controller.runAlgorithm(algoComboBox.selectedItem, seed)" />			
			<mx:Spacer width="4"/>
			<s:ComboBox id="algoComboBox" width="106" height="24" toolTip="Select Algorithm" fontFamily="Helvetica" preinitialize="initVars();" selectedIndex="0">
				<s:dataProvider>
					<mx:ArrayCollection id="algos" source="{xfalgos}" />					
				</s:dataProvider>
				<s:itemRenderer>
					<fx:Component>
						<s:ItemRenderer>							
							<s:Label left="5" height="22" width="85" maxDisplayedLines="1" verticalAlign="middle" toolTip="{data.toolTip}" text="{data.label}" />
						</s:ItemRenderer>						
					</fx:Component>					
				</s:itemRenderer> 
			</s:ComboBox>
			<mx:Spacer width="23"/>
			<mx:Button cornerRadius="0" width="23" height="24" icon="@Embed(source='../../../../../../assets/icons/arrow_undo.png')" toolTip="Undo [Ctrl+z]" click="controller.undo()" />
			<mx:Button cornerRadius="0" width="23" height="24" icon="@Embed(source='../../../../../../assets/icons/arrow_redo.png')" toolTip="Redo [Ctrl+Shift+z]" click="controller.redo()" />				
			<mx:Spacer width="23"/>			
			<mx:Button cornerRadius="0" width="23" height="24" icon="@Embed(source='../../../../../../assets/icons/tumbling_dice.png')" toolTip="Generate Random Payoffs" click="controller.doAction(actions.randomPayoffs)" />
			<mx:Button cornerRadius="0" width="23" height="24" icon="@Embed(source='../../../../../../assets/icons/sum.png')" toolTip="Zero Sum {controller.isZeroSum ? 'ON' : 'OFF'}" toggle="true" selected="{controller.isZeroSum}" change="controller.isZeroSum = event.target.selected;" />
			<mx:Button id="recallButton" cornerRadius="0" width="23" height="24" icon="@Embed(source='../../../../../../assets/icons/lightbulb.png')" toolTip="Make Perfect Recall" click="controller.doAction(actions.perfectRecall)" />
			<mx:Spacer width="20" />		
			<mx:Button cornerRadius="0" width="23" height="24" icon="@Embed(source='../../../../../../assets/icons/zoom_in.png')" toolTip="Zoom In [Shift+l]" click="controller.zoomIn()" />
			<mx:Button cornerRadius="0" width="23" height="24" icon="@Embed(source='../../../../../../assets/icons/zoom_out.png')" toolTip="Zoom Out [l]" click="controller.zoomOut()" />
			<mx:Button cornerRadius="0" width="23" height="24" icon="@Embed(source='../../../../../../assets/icons/zoom.png')" toolTip="Adjust Zoom [Ctrl+l]" click="controller.zoomAdjust()" />			
			<mx:Spacer width="23" />
			<mx:Button cornerRadius="0" width="23" height="24" icon="@Embed(source='../../../../../../assets/icons/cog_edit.png')" toolTip="Edit Settings" click="showSettings()"/>			
		</s:HGroup>
	</s:Group>
</s:Application>
