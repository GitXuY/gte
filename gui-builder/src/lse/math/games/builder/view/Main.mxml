<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns="lse.math.games.builder.view.*"
			   backgroundColor="0xB7BABC" minWidth="692" xmlns:model="lse.math.games.builder.model.*">
	
	<fx:Script>
		<![CDATA[		
			import lse.math.games.builder.io.FileManager;
			import lse.math.games.builder.io.XMLExporter;
			import lse.math.games.builder.model.Strategy;
			import lse.math.games.builder.settings.SCodes;
			import lse.math.games.builder.settings.Settings;
			import lse.math.games.builder.settings.UserSettings;
			import lse.math.games.builder.viewmodel.TreeGrid;
			
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.managers.PopUpManager;
			import mx.utils.StringUtil;
			
			import util.EvCodes;
			import util.EventManager;
			import util.Log;
			import util.PromptTwoButtons;
						
			[Bindable]
			public var seed:String;
			
			[Bindable]
			public var nfalgos:Array = new Array();
			
			[Bindable]
			public var xfalgos:Array = new Array();
			
			//TODO: If possible, move the folowing two to the <fx:declaration>
			private var log:Log = Log.instance;
			
			[Bindable]
			//if moved to declarations, erase the 'added' property in 'filename' textbox 
			private var fileManager:FileManager; 
			
			private var eventManager:EventManager = EventManager.instance;
			private var settings:UserSettings = UserSettings.instance;			
			
			
			
			/* <--- --- MODE CHANGING FUNCTIONS --- ---> */
			//Changes the controller mode 
			private function changeMode(event:FlexEvent):void
			{
				if(modeBar.selectedIndex == 0) controller.toggleTreeMode(); 
				else if(modeBar.selectedIndex == 1) controller.toggleMatrixMode();
			}
			
			//Registers a listener for changes on the mode, which will update the gui if it needs to be done
			private function initModeChangeListener():void
			{
				eventManager.addEventListener(EvCodes.MODE_CHANGED, updateModeBar);
				eventManager.addEventListener(EvCodes.MODE_CHANGED, updateSelectedTab);
			}
						
			//Updates the modeBar with the current mode status
			private function updateModeBar(evt:Event):void
			{
				if(controller.treeMode)
					modeBar.selectedIndex = 0;
				else if(controller.matrixMode)
					modeBar.selectedIndex = 1;
			}
			
			

			/* <--- --- TOOLBARS-RELATED FUNCTIONS --- ---> */
			
			//Executes the clear() function from the controller, depending on the button pressed as a result of the prompt
			private function clearDependingOnPromptResult():void
			{
				if(PromptTwoButtons.buttonPressed == PromptTwoButtons.OK)
				{
					if(mouseScrollingEnabled)
						disableMouseScrolling();
					opModeBar2.selectedIndex = 0;
					controller.clear();
				}
			}
			
			//Pops up the -internal or external- output window
			private function showOutput(text:String):void {
				if (ExternalInterface.available && !settings.getValue(SCodes.DISPLAY_OUTPUT_INTERNALLY) as Boolean) {
					ExternalInterface.call('writeSolution', text);
					log.add(Log.HINT, "You don't see the output? Then you must allow popups " +
						"in your browser. Don't forget to save your changes before. Or you could " +
						"activate the 'Display output internally' setting in the Settings panel.");
				}
				else {
					PopUpManager.addPopUp(intOutputWindow, this, false);
					intOutputWindow.setText(text);
					PopUpManager.centerPopUp(intOutputWindow);
				}
			}
			
			//Populates from the external html container's params the list of algos
			private function initVars():void 
			{			
				// FOR TESTING ONLY... comment this and uncomment one below before building for prod
				//var flashvars:Object = {
				//	menum: "label=Lrs Find All Eq;toolTip=Lrs Find All Equilibria;type=nf;url=http://localhost:8888/matrix/",
				//	msolve: "label=Lemke Find Eq;toolTip=Lemke Find One Equilibrium;type=nf;url=http://localhost:8888/matrix/",   
				//	xsolve: "label=Lemke Find Eq;toolTip=Lemke Find One Equilibrium (Sequence Form);type=xf;url=http://localhost:8888/tree/"
				//};
				var flashvars:Object = FlexGlobals.topLevelApplication.parameters;
				for (var param:String in flashvars) {
					if (param == "seed") {
						seed = StringUtil.trim(flashvars[param]);
					} else {
						//Alert.show("'" + param + "'='" + flashvars[param] + "'");
						// TODO: use XMLListCollection and pass in XML to load and use instead of this homemade parsing
						var pvalue:String = StringUtil.trim(flashvars[param]);				
						var o:Object = new Object();
						o.uid = param;
						
						for each (var pair:String in pvalue.split(";")) {
							var keyvalue:Array = pair.split("=");
							var key:String = StringUtil.trim(keyvalue[0]);
							var value:String = StringUtil.trim(keyvalue[1]);
							o[key] = value;
							//Alert.show("'" + key + "'='" + o[key] + "'");
						}
						o.service = httpService;
						
						if (o["type"] == "nf") {
							nfalgos.push(o);
						} else if (o["type"] == "xf") {
							xfalgos.push(o);
						} /*else {
						trace("Unrecognized type");
						}*/
					}
				}
			}
			
			//Pops up the settings edition window
			private function showSettings():void
			{
				var s:Settings = new Settings();
				s.controller = controller;
				PopUpManager.addPopUp(s, this, false);
				PopUpManager.centerPopUp(s);
			}				
			
			[Bindable]
			private var expanded:Boolean = false;
			
			//Checks the expand setting, and updates the 'expanded' var & the webcontainer accordingly
			private function updateExpandStatus():void 
			{
				expanded = settings.getValue(SCodes.EXPANDED) as Boolean;
				ExternalInterface.call("expand", expanded);
				updateLogLineDimensions();
			}
			
			//Should be called from the expand button, and changes the expand status, updating everything
			private function switchExpandStatus():void 
			{
				expanded = !expanded;
				settings.setValue(SCodes.EXPANDED, expanded);
				settings.saveCookiesIfPossible();
				ExternalInterface.call("expand", expanded);
				updateLogLineDimensions();
			}
			
			//Return the action corresponding to the button pressed in opModeBar2
			private function getClickCallback(idx:int):Function 
			{
				if(controller.treeMode)
				{
					//First disable pan tool if it is running
					if(mouseScrollingEnabled)
						disableMouseScrolling();
					
					switch (idx) {
						case 0: return actions.addChildIset;
						case 1: return actions.addChild;
						case 2: return actions.deleteNode;
						case 3: return actions.cutIset;
						case 4: return actions.dissolveIset;
						case 5: return actions.mergeIsets;	
						case 6: return actions.changePlayer;							
						case 7: return actions.makeChance;	
						case 8: return actions.nullAction;
					}
					log.add(Log.ERROR_THROW, "callback for index " + idx + " not found");
				} return null;
			}
			
			// Changes orientation of the tree
			private function changeOrientation(orientation:int):void
			{
				switch(orientation)
				{
					case 0:
						controller.doAction(actions.orientationUp);
						break;
					case 1:
						controller.doAction(actions.orientationDown);
						break;
					case 2:
						controller.doAction(actions.orientationLeft);
						break;
					case 3:
						controller.doAction(actions.orientationRight);
						break;
				}
			}
					
			//Pops up the matrix edition window
			private function showMatrixEditor():void
			{
				var me:MatrixEditor = new MatrixEditor();
				me.matrix = matrix;
				me.controller = controller;
				
				PopUpManager.addPopUp(me, this, true);
				PopUpManager.centerPopUp(me);
			}	
			
			
			
			/* <--- --- TABS & CANVAS-RELATED FUNCTIONS --- ---> */
			
			private function updateSelectedTab(evt:Event):void
			{
				tabNavigator.selectedIndex = controller.currentState;
			}
			
			//This function runs when tabs are changed
			private function tabChange(event:IndexChangedEvent):void
			{				
				//Set canvas
				controller.canvas = event.target.selectedIndex == 0 ? canvas : canvasNF; 
				
				//Set list of algorithms
				algos.source = event.target.selectedIndex == 0 ? xfalgos : nfalgos; 
				algoComboBox.selectedIndex = 0;			
				
				//De/Activate mousescrolling on the new tab according to the selected setting
				if(event.target.selectedIndex == 0)	{
					if(mouseScrollingEnabled) scrollbarEF.enableMouseScrolling();
					else scrollbarEF.disableMouseScrolling();
				} else if(event.target.selectedIndex == 1) {
					if(mouseScrollingEnabled) scrollbarSF.enableMouseScrolling();
					else scrollbarSF.disableMouseScrolling();
				}
			}
			
			// Handles click on the canvas
			private function handleClickOnCanvas():void
			{
				if(!mouseScrollingEnabled){
					//TODO #32 Handle click differently depending on the mode
					if(opModeBar2.selectedIndex != 8)
						controller.doActionAt(canvas.mouseX, canvas.mouseY);
					else
						treePainter.selectAndEdit(controller, canvas.mouseX, canvas.mouseY);
				}
			}
			
			[Bindable]
			private var mouseScrollingEnabled:Boolean = false;
			
			//Enables scrolling by dragging the canvas, disabling all other click actions on it
			private function enableMouseScrolling():void {
				var tab:String = tabNavigator.selectedChild.label;
				
				if(tab == "Extensive Form")
					scrollbarEF.enableMouseScrolling();
				else if(tab == "Strategic Form")
					scrollbarSF.enableMouseScrolling();
				
				mouseScrollingEnabled = true;
			}
			
			//Disables scrolling by dragging the canvas, enabling all other click actions on it
			private function disableMouseScrolling():void {
				var tab:String = tabNavigator.selectedChild.label;
				
				if(tab == "Extensive Form")
					scrollbarEF.disableMouseScrolling();
				else if(tab == "Strategic Form")
					scrollbarSF.disableMouseScrolling();
				
				mouseScrollingEnabled = false;
			}
			
			
			
			/* <--- --- LOGLINE-RELATED FUNCTIONS --- ---> */
			
			//Registers a listener for HINTs added to Log, which will call updateHint
			private function initLogLineListener():void
			{
				eventManager.addEventListener(EvCodes.HINT_ADDED, updateLogLine);
			}
			
			private var lastLogLineTimeoutId:int = -1;
			
			//Updates the LogLine with the text from a HINT event
			private function updateLogLine(evt:TextEvent):void
			{
				logLine.text = evt.text;
				if(lastLogLineTimeoutId != -1)
					clearTimeout(lastLogLineTimeoutId);
				
				var optimalMsForReading:int = Math.max(3000, evt.text.length*67); 
				//These ms are calculated from average lowest reading speed in english (200 wpm)
				//and average of letters per word in english (4.5), plus a source of extra
				//time: counting the non-letter characters as letters
				
				lastLogLineTimeoutId = setTimeout(clearLogLine, optimalMsForReading);
			}
			
			//Changes the dimensions according to the expanded status
			private function updateLogLineDimensions():void
			{
				if(expanded)
				{
					logLineContainer.left = 1;
					logLineContainer.right = 1;
				} else
				{
					logLineContainer.left = 0;
					logLineContainer.right = 0;
				}
			}
			
			//Erases the logLine text
			private function clearLogLine():void {
				lastLogLineTimeoutId = -1;
				logLine.text = "";
			}
			
			
			
			/* <--- --- KEYBOARD EVENT HANDLERS --- ---> */
			
			//Shortcuts when key is pressed
			protected function sc_keyDownHandler(event:KeyboardEvent):void
			{			
				switch(event.keyCode)
				{
					case Keyboard.SPACE:
						enableMouseScrolling();
						break;
				}
			}
			
			//Shortcuts when key is released
			protected function sc_keyUpHandler(event:KeyboardEvent):void
			{
				var ctrl:Boolean = event.ctrlKey;
				var shift:Boolean = event.shiftKey;
				
				switch(event.keyCode)
				{
					case Keyboard.SPACE:
						disableMouseScrolling();
						break;
					case 67: //'c'
						if(ctrl) PromptTwoButtons.show(clearDependingOnPromptResult, "Are you really sure you want to clear the game?");
						break;
					case 76: //'l'
						if(ctrl) controller.zoomAdjust();
						else {
							if(shift) controller.zoomIn();
							else controller.zoomOut();
						}
								
						break;						
					case 79: //'o'
						if(ctrl) controller.open();
						break;
					case 83: //'s'
						if(ctrl) controller.save();
						break;
					case 82: //'r'
						if(ctrl) controller.runAlgorithm(algoComboBox.selectedItem, seed);
						break;
					case 90: //'z'
						if(ctrl) 
						{
							if(shift)
								controller.redo();
							else
								controller.undo();
						}
						break;
				}
			}		
		]]>
	</fx:Script>
	
	<!-- TODO: only cornerRadius seems to be working? -->
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		.myButton {
			cornerRadius:0;
		}
		.mxTabLabels {
			textFieldClass: ClassReference("mx.core.UIFTETextField");
			fontFamily: Helvetica;
			fontWeight: bold;			
		}
	</fx:Style>
	
	<fx:Declarations>
		<mx:HTTPService id="httpService"
						concurrency="single"		 
						method="POST"		 
						resultFormat="text"
						showBusyCursor="true"
						fault="log.add(Log.ERROR, event.fault.faultCode + ':' + event.fault.faultString + ':' + event.fault.faultDetail)"
						result="showOutput(event.result as String);"
						/>
		<TreeGrid id="grid" xmlns="lse.math.games.builder.viewmodel.*" matrix="{matrix}" />
		<PainterChain id="treePainter" xmlns="lse.math.games.builder.view.*">
			<links>
				<fx:Vector type="lse.math.games.builder.view.IPainter">
					<TreeGridPainter xmlns="lse.math.games.builder.viewmodel.*" grid="{grid}" />
					<TreeGridSetPainter xmlns="lse.math.games.builder.viewmodel.*" grid="{grid}" />
				</fx:Vector>
			</links>
		</PainterChain>
		<model:StrategicForm id="matrix" grid="{grid}"/>
		<MatrixPainter id="matrixPainter" xmlns="lse.math.games.builder.viewmodel.*" matrix="{matrix}" />
		<TreeGridActionFactory id="actions" xmlns="lse.math.games.builder.viewmodel.*" />		
		<Presenter id="controller" xmlns="lse.math.games.builder.presenter.*" grid="{grid}" matrix="{matrix}" getDataUpdateAction="actions.outcomeDataUpdate" />
		<OutputWindow id="intOutputWindow" xmlns="lse.math.games.builder.view.*" skinClass="lse.math.games.builder.view.OutputWindowSkin" />
	</fx:Declarations>
	
	<s:Group left="0" right="0" top="0" bottom="0" >
		
		<!-- TOP CONTROL BAR -->		
		<s:HGroup left="{expanded ? 3 : 0}" height="30" top="0" paddingTop="3" gap="-1" right="0" clipAndEnableScrolling="true" keyDown="sc_keyDownHandler(event)" keyUp="sc_keyUpHandler(event)">
			<mx:Button styleName="myButton" width="23" height="24" icon="@Embed(source='../../../../../../assets/icons/page_white.png')" toolTip="Clear [Ctrl+c]" click="PromptTwoButtons.show(clearDependingOnPromptResult, 'Are you really sure you want to clear the game?');" />
			<mx:Button styleName="myButton" width="23" height="24" icon="@Embed(source='../../../../../../assets/icons/folder_page.png')" toolTip="Open [Ctrl+o]" click="controller.open()" />	
			<mx:Button styleName="myButton" width="23" height="24" icon="@Embed(source='../../../../../../assets/icons/page_save.png')" toolTip="Save [Ctrl+s]" click="controller.save()" />	
			<mx:Button styleName="myButton" width="23" height="24" icon="@Embed(source='../../../../../../assets/icons/page_white_picture.png')" toolTip="Export As PNG File" click="controller.image()" />			
			<mx:Button styleName="myButton" width="23" height="24" icon="@Embed(source='../../../../../../assets/icons/page_white_vector.png')" toolTip="Export As FIG File" click="controller.fig()" />
			
			<mx:Spacer width="23" />
			<mx:TextInput id="filename" width="100" height="24" enabled="false" added="fileManager = controller.fileManager;"
						  click="filename.enabled=true;" focusOut="filename.enabled=false; if(filename.text.length>0) fileManager.filename= filename.text; else filename.text = fileManager.filename" 
						  text="{fileManager.filename}" keyUp="if(event.keyCode == Keyboard.ENTER) controller.canvas.setFocus(); event.stopPropagation()" keyDown="event.stopPropagation()" 
						  borderVisible="false" color="#EEEEEE" contentBackgroundColor="#B6BABD" disabledColor="#000000"/>
			<mx:Spacer width="23"/>
			<mx:ToggleButtonBar id="modeBar" buttonHeight="24" valueCommit="changeMode(event)" selectedIndex="0" creationComplete="initModeChangeListener()">
				<mx:dataProvider>	
					<mx:ArrayCollection>
						<mx:source>
							<fx:Object toolTip="Switch to editable Extensive Form Mode" label="EF Edit"/>
							<fx:Object toolTip="Switch to editable Strategic Form Mode" label="SF Edit"/>
						</mx:source>
					</mx:ArrayCollection>
				</mx:dataProvider>
			</mx:ToggleButtonBar>
			<mx:Spacer width="23"/>
			<mx:Button styleName="myButton" width="23" height="24" icon="@Embed(source='../../../../../../assets/icons/cog_go.png')" toolTip="Run [Ctrl+r]" click="controller.runAlgorithm(algoComboBox.selectedItem, seed)" />			
			<mx:Spacer width="4"/>
			<s:ComboBox id="algoComboBox" width="111" height="24" toolTip="Select Algorithm" fontFamily="Helvetica" preinitialize="initVars();" selectedIndex="0">
				<s:dataProvider>
					<mx:ArrayCollection id="algos" source="{xfalgos}" />					
				</s:dataProvider>
				<s:itemRenderer>
					<fx:Component>
						<s:ItemRenderer>							
							<s:Label left="5" height="22" width="92" maxDisplayedLines="1" verticalAlign="middle" toolTip="{data.toolTip}" text="{data.label}" />
						</s:ItemRenderer>						
					</fx:Component>					
				</s:itemRenderer> 
			</s:ComboBox>
			<mx:Spacer width="23"/>
			<mx:Button styleName="myButton" width="23" height="24" icon="@Embed(source='../../../../../../assets/icons/arrow_undo.png')" toolTip="Undo [Ctrl+z]" 
					   click="controller.undo()" />
			<mx:Button styleName="myButton" width="23" height="24" icon="@Embed(source='../../../../../../assets/icons/arrow_redo.png')" toolTip="Redo [Ctrl+Shift+z]" 
					   click="controller.redo()" />				
			<mx:Spacer width="23"/>			
			<mx:Button styleName="myButton" width="23" height="24" icon="@Embed(source='../../../../../../assets/icons/tumbling_dice.png')" toolTip="Generate Random Payoffs" 
					   click="controller.doAction(actions.randomPayoffs)" />
			<mx:Button styleName="myButton" width="23" height="24" icon="@Embed(source='../../../../../../assets/icons/sum.png')" toolTip="Zero Sum {controller.isZeroSum ? 'ON' : 'OFF'}" 
					   toggle="true" selected="{controller.isZeroSum}" change="controller.isZeroSum = event.target.selected;" />
			<mx:Spacer width="23" />		
			<mx:Button styleName="myButton" width="23" height="24" icon="@Embed(source='../../../../../../assets/icons/zoom_in.png')" toolTip="Zoom In [Shift+l]" 
					   click="controller.zoomIn()" />
			<mx:Button styleName="myButton" width="23" height="24" icon="@Embed(source='../../../../../../assets/icons/zoom_out.png')" toolTip="Zoom Out [l]" 
					   click="controller.zoomOut()" />
			<mx:Button styleName="myButton" width="23" height="24" icon="@Embed(source='../../../../../../assets/icons/zoom.png')" toolTip="Adjust Zoom [Ctrl+l]" 
					   click="controller.zoomAdjust()" />				
			<mx:Button styleName="myButton" width="23" height="24" icon="@Embed(source='../../../../../../assets/icons/pan_tool.png')" toolTip="Pan Tool {scrollbarSF.mouseScrollingEnabled ? 'ON' : 'OFF'} [Hold SpaceBar]" 
					   toggle="true" selected="{mouseScrollingEnabled}" change="if(mouseScrollingEnabled) disableMouseScrolling(); else enableMouseScrolling()" />
			<mx:Spacer width="23" />
			<mx:Button styleName="myButton" width="23" height="24" icon="@Embed(source='../../../../../../assets/icons/cog_edit.png')" toolTip="Edit Settings" 
					   click="showSettings()"/>			
		</s:HGroup>
		
		<s:Button id="expandButton" right="{expanded ? 3 : 0}" top="3" height="24" styleName="myButton" chromeColor="#d6d6d6" 
				  label="{expanded ? 'Contract' : 'Expand'}"
				  click="switchExpandStatus()"
				  add="updateExpandStatus()" />
		
		<!-- TABS -->
		<s:BorderContainer top="30" bottom="18" left="0" right="{leaves.visible ? 185 : 0}" backgroundColor="0xe0e0e0" backgroundAlpha="1" borderColor="0x808080" keyDown="sc_keyDownHandler(event)" keyUp="sc_keyUpHandler(event)">
			<mx:TabNavigator id="tabNavigator" tabHeight="22" top="3" bottom="-1" left="-1" right="-1" depth="2"  tabOffset="5" paddingTop="0" backgroundColor="0xffffff" tabStyleName="mxTabLabels" 
							 change="tabChange(event)">
				<s:NavigatorContent label="Extensive Form">
					<MouseScroller id="scrollbarEF" width="100%" height="100%">
						<s:Group id="viewport" width="100%" height="100%">
							<Canvas id="canvas" width="100%" height="100%" click="handleClickOnCanvas()" painter="{treePainter}" preinitialize="controller.canvas = canvas;" />
						</s:Group>
					</MouseScroller>
					
					<s:Label top="5" left="5"  fontFamily="Helvetica" color="0x808080" text="VIEW ONLY" toolTip="Toggle EF Edit mode for editing the tree" 
							 visible="{modeBar.selectedIndex!=0}"/>
					<s:Label id="info" top="5" right="{scrollbarEF.verticalScrollBar.visible ? 20 : 5}" fontFamily="Helvetica" text="{int(canvas.width)} x {int(canvas.height)} ({int(treePainter.scale * 100)}%)" />
					
					<s:HGroup gap="-1" left="280" right="0" top="-21" depth="3" verticalAlign="bottom" clipAndEnableScrolling="true">
						<mx:ToggleButtonBar id="orientationBar" buttonHeight="21" buttonWidth="23" buttonStyleName="myButton" firstButtonStyleName="myButton" lastButtonStyleName="myButton" selectedIndex="0" valueCommit="changeOrientation(orientationBar.selectedIndex)">
							<mx:dataProvider>	
								<mx:ArrayCollection>
									<mx:source>
										<fx:Object icon="@Embed(source='../../../../../../assets/icons/orientation_up.png')" toolTip="Orientation: Root on top"/>
										<fx:Object icon="@Embed(source='../../../../../../assets/icons/orientation_down.png')" toolTip="Orientation: Root on bottom"/>
										<fx:Object icon="@Embed(source='../../../../../../assets/icons/orientation_left.png')" toolTip="Orientation: Root at left"/>
										<fx:Object icon="@Embed(source='../../../../../../assets/icons/orientation_right.png')" toolTip="Orientation: Root at right"/>
									</mx:source>
								</mx:ArrayCollection>
							</mx:dataProvider>
						</mx:ToggleButtonBar>
						<mx:Spacer width="23" />
						<mx:ToggleButtonBar id="opModeBar2" buttonHeight="21" buttonWidth="23" buttonStyleName="myButton" firstButtonStyleName="myButton" 
											lastButtonStyleName="myButton" selectedIndex="0" creationComplete="controller.getClickAction = getClickCallback(opModeBar2.selectedIndex)" 
											valueCommit="controller.getClickAction = getClickCallback(opModeBar2.selectedIndex);"
											visible="{modeBar.selectedIndex==0}">
							<mx:dataProvider>					
								<mx:ArrayCollection>
									<mx:source>
										<fx:Object icon="@Embed(source='../../../../../../assets/icons/add_iset.png')" toolTip="Add Children in Iset" /> 
										<fx:Object icon="@Embed(source='../../../../../../assets/icons/add.png')" toolTip="Add Children" /> 
										<fx:Object icon="@Embed(source='../../../../../../assets/icons/delete.png')" toolTip="Delete Node" /> 
										<fx:Object icon="@Embed(source='../../../../../../assets/icons/cut_red.png')" toolTip="Cut Iset" /> 
										<fx:Object icon="@Embed(source='../../../../../../assets/icons/link_break.png')" toolTip="Dissolve Iset" /> 
										<fx:Object icon="@Embed(source='../../../../../../assets/icons/link.png')" toolTip="Merge Isets" /> 
										<fx:Object icon="@Embed(source='../../../../../../assets/icons/user_go.png')" toolTip="Change Player" /> 
										<fx:Object icon="@Embed(source='../../../../../../assets/icons/user_delete.png')" toolTip="Make Chance" />
										<fx:Object icon="@Embed(source='../../../../../../assets/icons/text_replace.png')" toolTip="Edit Labels" /> 
									</mx:source>
								</mx:ArrayCollection>
							</mx:dataProvider>
						</mx:ToggleButtonBar>
						<mx:Spacer width="23" />
						<mx:Button styleName="myButton" width="23" height="21" icon="@Embed(source='../../../../../../assets/icons/lightbulb.png')" toolTip="Make Perfect Recall" 
								   click="controller.doAction(actions.perfectRecall)" visible="{modeBar.selectedIndex==0}" />
					</s:HGroup>					
					
				</s:NavigatorContent>
				<s:NavigatorContent label="Strategic Form">
					<MouseScroller id="scrollbarSF" width="100%" height="100%">
						<s:Group id="viewportNF" width="100%" height="100%">
							<Canvas id="canvasNF" width="100%" height="100%" painter="{matrixPainter}" />
						</s:Group>
					</MouseScroller>
					
					<s:Label top="5" left="5"  fontFamily="Helvetica" color="0x808080" text="VIEW ONLY" toolTip="Toggle SF Edit mode for editing the matrix" 
							 visible="{modeBar.selectedIndex!=1}"/>
					<s:Label id="infoNF" top="5" right="{scrollbarSF.verticalScrollBar.visible ? 20 : 5}" fontFamily="Helvetica" text="{int(canvasNF.width)} x {int(canvasNF.height)} ({int(matrixPainter.scale * 100)}%)" />
					
					<s:HGroup gap="-1" left="280" right="0" top="-21" depth="3" verticalAlign="bottom" clipAndEnableScrolling="true">
						<mx:ToggleButtonBar id="nfReducedBar" buttonHeight="21" buttonWidth="23" buttonStyleName="myButton" firstButtonStyleName="myButton" lastButtonStyleName="myButton" selectedIndex="0" valueCommit="controller.isStrategicReduced = (event.target.selectedIndex == 0);">
							<mx:dataProvider>					
								<mx:ArrayCollection>
									<mx:source>
										<fx:Object icon="@Embed(source='../../../../../../assets/icons/arrow_in.png')" toolTip="Reduced Strategic Form" /> 
										<fx:Object icon="@Embed(source='../../../../../../assets/icons/arrow_out.png')" toolTip="Full Strategic Form" /> 										
									</mx:source>
								</mx:ArrayCollection>
							</mx:dataProvider>
						</mx:ToggleButtonBar>
						<mx:Spacer width="23" />
						<mx:Button styleName="myButton" width="23" height="21" icon="@Embed(source='../../../../../../assets/icons/table_edit.png')" toolTip="Edit matrixes"
								   click="showMatrixEditor()" visible="{modeBar.selectedIndex==1}"/>
					</s:HGroup>
				</s:NavigatorContent>					
			</mx:TabNavigator>
		</s:BorderContainer>
		
		<!-- SEQUENCE TABLE -->
		<mx:DataGrid id="leaves" dataProvider="{controller.outcomeData}" bottom="18" top="30" right="0" width="180" borderColor="0x808080"
					 editable="{modeBar.selectedIndex==0}" visible="{modeBar.selectedIndex==0}" draggableColumns="false" sortableColumns="false" 
					 change="controller.selectedOutcome = (leaves.selectedItem != null ? leaves.selectedItem.uid : -1);" 
					 focusOut="controller.selectedOutcome = -1" focusIn="controller.selectedOutcome = (leaves.selectedItem != null ? leaves.selectedItem.uid : -1);">
			<mx:columns>
				<mx:DataGridColumn headerText="Sequence" dataField="leaf" width="110" editable="true"/>				
				<mx:DataGridColumn headerText="{controller.player1Name}" dataField="pay1" width="33" editable="true" />
				<mx:DataGridColumn headerText="{controller.player2Name}" dataField="pay2" width="33" editable="{!controller.isZeroSum}"/>
			</mx:columns>
		</mx:DataGrid>
		
		<!-- BOTTOM LOG LINE -->
		<s:BorderContainer id="logLineContainer" left="1" right="1" bottom="1" height="16" borderColor="0x808080">
			<s:Label id="logLine" height="100%" width="100%"  backgroundColor="0xd6d6d6"
				 color="#000000" creationComplete="initLogLineListener();"
				 fontFamily="Verdana" fontSize="10" paddingLeft="5" 
				 paddingRight="5" paddingTop="2" textAlign="left" verticalAlign="middle"/>
		</s:BorderContainer>
		
	</s:Group>
</s:Application>
