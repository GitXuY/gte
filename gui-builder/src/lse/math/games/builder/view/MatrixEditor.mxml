<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:local="."
			   title="Matrix editor"
			   close="promptExit()">
	<fx:Script>
		<![CDATA[
			import lse.math.games.builder.model.Outcome;
			import lse.math.games.builder.model.Player;
			import lse.math.games.builder.model.Rational;
			import lse.math.games.builder.model.StrategicForm;
			import lse.math.games.builder.model.Strategy;
			import lse.math.games.builder.presenter.Presenter;
			import lse.math.games.builder.viewmodel.AutoLabeller;
			
			import mx.controls.Alert;
			import mx.managers.PopUpManager;
			import mx.utils.StringUtil;
			
			import util.Log;
			import util.PromptTwoButtons;
			import util.PromptThreeButtons;
			
			
			private var _matrix:StrategicForm;
			private var _strMap:Dictionary;
			private var _payMap:Dictionary;
			private var _controller:Presenter;
			
			import lse.math.games.builder.settings.UserSettings;
			import lse.math.games.builder.settings.SCodes;
			
			private var log:Log = Log.instance;
			
			private var payoffMatrix1:Array;
			private var payoffMatrix2:Array;
			private var maxColumns:int;
			
			[Bindable]
			public var alpha1:String; //String with the strategies of pl1
			[Bindable]
			public var pl1NumStr:int;
			[Bindable]
			private var pl1PayMapStr:String;
			
			[Bindable]
			private var alpha2:String; //String with the strategies of pl2
			[Bindable]
			private var pl2NumStr:int;
			[Bindable]
			private var pl2PayMapStr:String;
			
			[Bindable]
			private var p2editable:Boolean=false;
			
			private var glbSettings:UserSettings = UserSettings.instance;
			private var dataChanged:Boolean = false;
			
			
			/** Matrix which is being edited */
			public function set matrix(value:StrategicForm):void { 
				_matrix = value;
				
				_strMap = new Dictionary();
				_payMap = _matrix.payMatrixMap;
				
				for(var i:int = 0, pl:Player = _matrix.firstPlayer; i<_matrix.numPlayers; i++, pl=pl.nextPlayer)
					_strMap[pl] = _matrix.strategies(pl);
				
				populate(0);
				populate(1);
				onlyAlignStrategy()
				p2editable=false;
				
				
			}
			
			/** Presenter to which changes should be invalidated */
			public function set controller(value:Presenter):void {
				_controller = value;
				
			}

			public function setMode(isZero:Boolean):void {
				if (!isZero) {
					inputStyle.selectedIndex=2;
					p2editable=true;
				}
			}
			
			
			//Populates the matrix payoffs and strategies of player number 'plIdx' (starting in 0)
			//onto the graphical components
			private function populate(plIdx:int):void {
				var delimeter:String=glbSettings.getValue(SCodes.EDITOR_MATRIX_DELIMETER) as String;
				var pl:Player = _matrix.firstPlayer;
				for(var i:int = 0; i<plIdx; i++)
					pl = pl.nextPlayer;
				
				var strVec:Vector.<Strategy> = _strMap[pl];
				
				if(plIdx == 0)
				{
					alpha1 = strVec.join(delimeter);
					pl1NumStr = strVec.length;
					pl1PayMapStr = payoffMatrixString(pl);
				} else if(plIdx == 1)
				{
					alpha2 = strVec.join(delimeter);
					pl2NumStr = strVec.length;		
					pl2PayMapStr = payoffMatrixString(pl);
				}
			}
			
			//Update the alphabets from the text boxes and autolabelling the rest
			private function updateAlphabets():void {
				var delimeter:String=glbSettings.getValue(SCodes.EDITOR_MATRIX_DELIMETER) as String;
				var inUse:Vector.<String> = new Vector.<String>();
				
				var strVec1:Vector.<String> = new Vector.<String>();
				var strVec2:Vector.<String> = new Vector.<String>();
				
				for each(var st:String in pl1StratInput.text.split(delimeter)) {
					if(st != null && st.length>0) {
						inUse.push(st.toString().toLowerCase());
						strVec1.push(st);
					}
				}
				for each(st in pl2StratInput.text.split(delimeter)) {
					if(st != null && st.length>0) {
						inUse.push(st.toString().toLowerCase());
						strVec2.push(st);
					}
				}
				
				var al:AutoLabeller = new AutoLabeller();
				al.uniqueLabelNum = (pl1NumStr+pl2NumStr-strVec1.length-strVec2.length) > 0 ? 
					pl1NumStr+pl2NumStr-strVec1.length-strVec2.length : 0;
				
				alpha1 = "";
				for(var i:int = 0; i<pl1NumStr; i++)
				{
					var stratName:String;
					if(i<strVec1.length) 
						stratName = strVec1[i].toString()
					else {
						while(true){
							stratName = al.getNextAutoLabel(_matrix.firstPlayer, _matrix);
							if(inUse.indexOf(stratName.toLowerCase())<0)
								break;
						}
					}
					alpha1+= (stratName+delimeter);
				}
				
				alpha2 = "";
				for(i = 0; i<pl2NumStr; i++)
				{
					if(i<strVec2.length) 
						stratName = strVec2[i].toString()
					else {
						while(true){
							stratName = al.getNextAutoLabel(_matrix.firstPlayer.nextPlayer, _matrix);
							if(inUse.indexOf(stratName.toLowerCase())<0)
								break;
						}
					}
					alpha2+= (stratName+delimeter);
				}
				
			}
			
			//Returns a string with the payoff matrix of a player
			
			private function payoffMatrixString(player:Player):String
			{
				var delimeter:String=glbSettings.getValue(SCodes.EDITOR_MATRIX_DELIMETER) as String;
				var pl1StrVec:Vector.<Strategy> = _strMap[_matrix.firstPlayer];
				var pl2StrVec:Vector.<Strategy> = _strMap[_matrix.firstPlayer.nextPlayer];
				
				var lines:Vector.<String> = new Vector.<String>();
				for each(var st1:Strategy in pl1StrVec)
				{
					var columns:Vector.<String> = new Vector.<String>();
					
					for each(var st2:Strategy in pl2StrVec)
					columns.push(_payMap[player][Strategy.key([st1,st2])]);
					
					lines.push(columns.join(delimeter));
				}
				return lines.join("\n");
			}
			
			
			
			/* <--- --- CLOSE HANDLERS --- ---> */	
			// Prompt if the user wants to exit saving changes
			private function promptExit():void {
				if (dataChanged) {
					PromptThreeButtons.show(resultFromExitPrompt, "Would you like to save the changes before closing?");
				}	else {
					exit();
				}
			}
			
			private function resultFromExitPrompt():void {
				if(PromptThreeButtons.buttonPressed == PromptThreeButtons.OK)
					saveChanges();
				else if(PromptThreeButtons.buttonPressed == PromptThreeButtons.DISCARD)
					exit();
			}
			
			// Save the changes into the new matrix
			private function saveChanges():void 
			{
				var delimeter:String=glbSettings.getValue(SCodes.EDITOR_MATRIX_DELIMETER) as String;
				updateAlphabets();
				
				var firstPl:Player = _matrix.firstPlayer;
				_matrix.clearMatrix();
				_matrix.firstPlayer = firstPl;
				
				var rows:Vector.<Strategy> = new Vector.<Strategy>();
				var cols:Vector.<Strategy> = new Vector.<Strategy>();
				
				for each(var st:String in alpha1.split(delimeter))
				{
					if(st != null && st.length>0) {
						var strat:Strategy = new Strategy(firstPl);
						strat.name = st;
						rows.push(strat);
						_matrix.addStrategy(strat);
					}
				}
				
				for each(st in alpha2.split(delimeter))
				{
					if(st != null && st.length>0) {
						strat = new Strategy(firstPl.nextPlayer);
						strat.name = st;
						cols.push(strat);
						_matrix.addStrategy(strat);
					}
				}
				
				var lines1:Array = pl1PayMapStr.split("\n");
				var lines2:Array = pl2PayMapStr.split("\n");
				
				for each(strat in rows)
				{
					var columns1:Array = new Array();
					var line:String = lines1.shift() as String;
					if(line != null)
						columns1 = line.split(delimeter);
					
					var columns2:Array = new Array();
					line = lines2.shift() as String;
					if(line != null)
						columns2 = line.split(delimeter);
					
					for each(var strat2:Strategy in cols)
					{
						var payStr1:String;
						var payStr2:String;
						var outcome:Outcome = new Outcome();
						
						while(true) {
							payStr1 = trim(columns1.shift() as String);
							if(payStr1 != null && Rational.parse(payStr1) != Rational.NaN){
								outcome.setPay(firstPl, Rational.parse(payStr1));
								break;
							} else if(columns1.length==0){
								outcome.setPay(firstPl, Rational.NaN);
								break;
							}
						}
						
						while(true) {
							payStr2 = trim(columns2.shift() as String);
							if(payStr2 != null && Rational.parse(payStr2) != Rational.NaN){
								outcome.setPay(firstPl.nextPlayer, Rational.parse(payStr2));
								break;
							} else if(columns2.length==0) {
								outcome.setPay(firstPl.nextPlayer, Rational.NaN);
								break;
							}
						}
						_matrix.addPayoff([strat, strat2], outcome, Rational.ONE);
					}
				}
				
				//invalidate display
				if(_controller != null)
					_controller.invalidate(false, true, true); 
				else
					log.add(Log.ERROR_HIDDEN, "No controller defined ", "Settings");
				
				exit();
			}
			
			//Close the window
			private function exit():void
			{
				PopUpManager.removePopUp(this);
			}
			
			private function trim( s:String ):String
			{
				if (s!=null){
					if (Rational.parse(s) == Rational.NaN)
						return s;
					else
						return s.replace( /^([\s|\t|\n]+)?(.*)([\s|\t|\n]+)?$/gm, "$2" );
				} else{
					return s;
				}
			}
			
			private function convertToMatrix(inputString:String,pm:Array):void {
				var delimeter:String=glbSettings.getValue(SCodes.EDITOR_MATRIX_DELIMETER) as String;
				var rows:Array = inputString.split("\n");
				var line:String = rows.shift() as String;
				maxColumns=0;
				while ( line != null ) {
					var columns:Array = line.split(delimeter);
					var column:String = columns.shift() as String;
					var matrixRow=new Array();
					while (column != null) {
						if (trim(column) !="") {
							matrixRow.push(column);
						}
						column = columns.shift() as String;
					}
					if (matrixRow.length>maxColumns) {
						maxColumns=matrixRow.length;
					}
					if (matrixRow.length>0) {
						pm.push(matrixRow);
					}
					line = rows.shift() as String;
				}
			}
			
			private function fillWithZeros(pm:Array):void{
				
				for (var i:int=0;i<pm.length;i++){
					var l:int=pm[i].length;
					if (l<maxColumns) {
						for (var k:int=0;k<maxColumns-l;k++) {
							pm[i].push("0");
						}
					}
				}

			}
			
			private function makeNegative(pmFrom:Array,pmTo:Array):void {
				for (var i:int=0;i<pmFrom.length;i++){
					var columns:Array=new Array();
					for (var j:int=0;j<pmFrom[i].length;j++){
						var r:Rational=Rational.parse(pmFrom[i][j]);
						if(pmFrom[i][j] != null && r != Rational.NaN){
							r=r.multiply(new Rational(-1,1));
							columns.push(r.toString());	
						}
						
						
					}
					pmTo.push(columns)
				}
			}
			
			private function makeTranspo(pmFrom:Array,pmTo:Array):void {
				
				for (var j:int=0;j<pmFrom[0].length;j++){
					var columns:Array=new Array();
					for (var i:int=0;i<pmFrom.length;i++){
						columns.push(pmFrom[i][j]);
					}
					pmTo.push(columns);
				}
			}
			
			private function buildMatrixString(pm:Array):String 
			{
				
				var delimeter:String=glbSettings.getValue(SCodes.EDITOR_MATRIX_DELIMETER) as String;
				var maxLength:Array = new Array();
				
				if (pm==null) 
					return Rational.NaN as String;
				if (pm[0]==null) 
					return Rational.NaN as String;
				
				for (var j:int=0;j<pm[0].length;j++){
					var maxLen:int = 0;
					for (var i:int=0;i<pm.length;i++){
						if (pm[i][j]!=null) {
							if (pm[i][j].length>maxLen) {
								maxLen=pm[i][j].length;
							}
							log.add(Log.DEBUG,pm[i][j]);
						}
					}
					maxLength.push(maxLen) as int;
				}
				
				var matrixString:String= "";
				for (var i:int=0;i<pm.length;i++){
					for (var j:int=0;j<pm[i].length;j++){
						matrixString += StringUtil.repeat(" ", maxLength[j] - pm[i][j].length ) + pm[i][j];
						if (j<pm[i].length-1){
							matrixString +=delimeter;
						}
						
					}
					if (i<pm.length - 1) {
						matrixString += "\n";
					}
				}
				return matrixString;
			
			}
			
			private function onlyAlignStrategy():void 
			{
				payoffMatrix1=new Array();
				payoffMatrix2=new Array();
				
				convertToMatrix(pl1PayMapStr,payoffMatrix1);
				fillWithZeros(payoffMatrix1);
				pl1PayMapStr=buildMatrixString(payoffMatrix1)
				
				convertToMatrix(pl2PayMapStr,payoffMatrix2);
				fillWithZeros(payoffMatrix2);
				pl2PayMapStr=buildMatrixString(payoffMatrix2)
				
			}
			
			private function alignStrategy():void 
			{
				
				var instyle:String = inputStyle.selectedItem.data;
				
				payoffMatrix1=new Array();
				payoffMatrix2=new Array();

				
				if (instyle=="ZG") {
					convertToMatrix(pl1PayMapStr,payoffMatrix1);
					fillWithZeros(payoffMatrix1);
					makeNegative(payoffMatrix1,payoffMatrix2);
					pl1PayMapStr=buildMatrixString(payoffMatrix1)
					pl2PayMapStr=buildMatrixString(payoffMatrix2)
					
					
				} else if (instyle=="SG") {
					convertToMatrix(pl1PayMapStr,payoffMatrix1);
					fillWithZeros(payoffMatrix1);
					makeTranspo(payoffMatrix1,payoffMatrix2);
					pl1PayMapStr=buildMatrixString(payoffMatrix1)
					pl2PayMapStr=buildMatrixString(payoffMatrix2)
					
				} else {
					convertToMatrix(pl1PayMapStr,payoffMatrix1);
					fillWithZeros(payoffMatrix1);
					pl1PayMapStr=buildMatrixString(payoffMatrix1)
						
						
					convertToMatrix(pl2PayMapStr,payoffMatrix2);
					fillWithZeros(payoffMatrix2);
					pl2PayMapStr=buildMatrixString(payoffMatrix2)
					
					
				}
				
				
				pl1NumStr = payoffMatrix1.length;
				if (payoffMatrix2.length>0) {
					pl2NumStr = payoffMatrix2[0].length;
				}else {
					pl2NumStr =0;
				}
				updateAlphabets()
				
			}
			
			private function changeEvt(event:Event):void {
				var instyle:String =event.currentTarget.selectedItem.data;
				if ((instyle=="ZG") || (instyle=="SG")) {
					p2editable=false;
					
				} else {
					p2editable=true;
				}
				
				alignStrategy();
				
			}
			 
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<!--
		<fx:String>Zero-Sum Game</fx:String>
		<fx:String>Symmetric Game</fx:String>
		<fx:String>Seperate matrix for every player</fx:String>
		-->

	</fx:Declarations>
	<fx:Style>
		@font-face {
			src:url("../../../../../../assets/fonts/COURBD.TTF");
			fontFamily: myFontFamily;
			advancedAntiAliasing: true;
		}
	</fx:Style>

	<s:VGroup width="819" paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5">
		<s:HGroup width="100%" gap="0">
			<s:VGroup width="50%" paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5">
				<s:Label text="Player 1 PayOff Matrix"/>
				<s:Label height="20" color="#2323E6" text="1. Step: Define the typ of the game"
						 verticalAlign="middle"/>
				<s:HGroup width="100%" verticalAlign="middle" toolTip="Number of strategies for this player">
					<s:Label y="0" width="90" height="20" text="Input style:" verticalAlign="middle"/>
					<mx:ComboBox id="inputStyle" width="100%" change="changeEvt(event);dataChanged=true;" textAlign="left" >
							<mx:ArrayCollection>
								<fx:Object label="Zero-Sum Game" data="ZG"/>
								<fx:Object label="Symmetric Game" data="SG"/>
								<fx:Object label="Seperate matrix for every player" data="2G"/>
							</mx:ArrayCollection>
					</mx:ComboBox>
				</s:HGroup>
				<s:HGroup>
					<s:Label height="20" text="Strategy names: " verticalAlign="middle"/>
					<s:TextInput id="pl1StratInput" width="300" editable="true" widthInChars="22" text="{alpha1}" change="dataChanged=true;" />
				</s:HGroup>	
				<s:Label height="20" color="#2323E6" text="2. Step: Type in the payoff matrix"
						 verticalAlign="middle"/>
				<s:TextArea id="pl1PayMapStrBox" width="400" widthInChars="30" fontFamily="myFontFamily" heightInLines="15" lineBreak="explicit" 
							text="{pl1PayMapStr}" change="pl1PayMapStr = pl1PayMapStrBox.text;dataChanged=true;"/>
				<s:Label height="20" color="#2323E6" text="3. Step: Update your input to align and compute payoffs for player 2"
						 verticalAlign="middle"/>
				<s:HGroup width="100%" horizontalAlign="center">
					<s:Button label="Reset" cornerRadius="0" click="populate(0);"/>
					<s:Button label="Update" cornerRadius="0" click="alignStrategy();"/>
				</s:HGroup>
			</s:VGroup>
			<s:VGroup width="50%" paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5">
				<s:Label text="Player 2 PayOff Matrix"/>
				<mx:Spacer height="45"/>
				<s:HGroup>
					<s:Label height="20" text="Strategy names:" verticalAlign="middle"/>
					<s:TextInput editable="{p2editable}" width="300" id="pl2StratInput" widthInChars="22" text="{alpha2}" change="dataChanged=true;" />
				</s:HGroup>
				<mx:Spacer height="20"/>
				<s:TextArea editable="{p2editable}" id="pl2PayMapStrBox" widthInChars="30" fontFamily="myFontFamily" heightInLines="15" lineBreak="explicit" 
							text="{pl2PayMapStr}" change="pl2PayMapStr = pl2PayMapStrBox.text;dataChanged=true;"/>
				<s:HGroup width="100%" horizontalAlign="center">
				<mx:Spacer height="20"/>
				<s:Button enabled="{p2editable}" label="Reset" cornerRadius="0" click="populate(1);" />
				</s:HGroup>
			</s:VGroup>
		</s:HGroup>

		<s:HGroup width="100%" horizontalAlign="center" paddingBottom="5" paddingTop="5">
			<s:Button label="Close and save changes" cornerRadius="0" width="200" click="saveChanges();"/>
			<s:Button label="Close and discard changes" cornerRadius="0" width="200" click="exit()"/>
		</s:HGroup>
		
	</s:VGroup>
	
</s:TitleWindow>
