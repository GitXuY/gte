<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" minWidth="400" minHeight="500" xmlns:presenter="lse.math.games.builder.presenter.*"
		 xmlns:local="."
		 title="Settings"
		 close="exit()">
	
	<fx:Script>
		<![CDATA[
			import lse.math.games.builder.fig.FigFontManager;
			import lse.math.games.builder.presenter.TreeGridPresenter;
			
			import mx.managers.PopUpManager;
			
			import util.Log;
			
			/**
			 * <b>INSTRUCTIONS</b>
			 * <p>Adding a new Setting</p>
			 * <ol>
			 * <li>First, define its identifier in SCodes.as, in the same fashion as already existing settings. 
			 * Also define its default value in the defaultSettings() function, and please document everything :)</li>
			 * <li>Now, add here a form item inside the tab that you most want, with the label that you want, and do these 3 things:
			 * <ul><li>Set the id of the color picker/toggle/textinput... to the same as the identifier that you defined earlier</li>
			 * 	   <li>Set the 'creationComplete' hanler to get the property of the item (e.g., 'selectedColor', 'selected', etc) 
			 * 			with settings.getValue(SCodes.THE_ID_YOU_CREATED) as WhateverTypeItShouldBe</li>
			 *     <li>Set the 'change' behaviour of your setting, which will normally just be setSetting(SCodes.THE_ID_YOU_CREATED, 
			 * 			THE_ID_YOU_CREATED.valueYouReInterestedIn)</li></ul>
			 * </li>
			 * <li>Finally, don't forget to use your settings value wherever you need it with 
			 * 		UserSettings.instance.getValue(SCodes.THE_ID_YOU_CREATED) as WhateverTypeItShouldBe</li>
			 * </ol>
			 * 
			 * <p>Using this Graphical Component</p>
			 * <li>Just Pop it up using PopUpManager and set its width and height to your preferred values. 
			 * Also set its 'controller' property to a valid one for invalidating the display with changes</li>
			 */			
			
			
			
			private var unsavedChanges:Boolean = false;
			private var settings:UserSettings = UserSettings.instance;
			private var _controller:TreeGridPresenter;
			
			private var log:Log = Log.instance;
			
			
			
			public function set controller(value:TreeGridPresenter):void { _controller = value; }
			
			//Sets a setting
			private function setSetting(key:String, value:Object):void
			{				
				if(!unsavedChanges)
				{
					if(settings.getValue(key) == null)
						unsavedChanges = true;
					else if(settings.getValue(key) != value)
						unsavedChanges = true;
				}
				
				settings.setValue(key, value);
			}
									
			//Saves settings if necessary, and closes the settings panel
			private function exit():void
			{
				if(unsavedChanges) 
				{
					//invalidate display
					if(_controller != null)
						_controller.invalidate(true, true, true); 
					else
						log.add(Log.ERROR_HIDDEN, "No controller defined ", "Settings");
					
					//Store settings locally if the preference is activated
					if(settings.getValue(SCodes.STORE_SETTINGS_LOCALLY) as Boolean && settings.cookiesStorable && !settings.saveCookies())
						throw new Error("Couldn't store the cookies, please retry");
				}
				
				PopUpManager.removePopUp(this);
			}
		]]>
	</fx:Script>
	

	
		<mx:TabNavigator tabHeight="22" left="-1" right="-1" top="-1" bottom="-1">
			<!-- General settings tab -->
			<s:NavigatorContent width="100%" height="100%" label="General settings" >
				<s:Group x="10" y="10" width="95%" height="95%">
					<mx:Form width="100%" height="100%" >
						<mx:FormItem label="Save settings locally">
							<s:CheckBox id="STORE_SETTINGS_LOCALLY"
										
										creationComplete="STORE_SETTINGS_LOCALLY.selected = 
										settings.getValue(SCodes.STORE_SETTINGS_LOCALLY) as Boolean;"
										
										change="if(STORE_SETTINGS_LOCALLY.selected)
										{
										if(settings.cookiesStorable)
										setSetting(SCodes.STORE_SETTINGS_LOCALLY, true );
										else
										{
										setSetting(SCodes.STORE_SETTINGS_LOCALLY, false );
										STORE_SETTINGS_LOCALLY.selected = false;
										settings.askForCookiesStorable();
										}
										} else
										{
										setSetting(SCodes.STORE_SETTINGS_LOCALLY, false );
										settings.clearCookies();
										}"
										/>
						</mx:FormItem>		
						<mx:FormItem label="Display output internally">
							<s:CheckBox id="DISPLAY_OUTPUT_INTERNALLY"
										
										creationComplete="DISPLAY_OUTPUT_INTERNALLY.selected =
										settings.getValue(SCodes.DISPLAY_OUTPUT_INTERNALLY) as Boolean;"
										
										change="setSetting(SCodes.DISPLAY_OUTPUT_INTERNALLY,
										DISPLAY_OUTPUT_INTERNALLY.selected);" />			
						</mx:FormItem>
					</mx:Form>
				</s:Group>
			</s:NavigatorContent>	
			
			<!-- Graphic settings tab -->
			<s:NavigatorContent width="100%" height="100%" label="Graphic settings" >
				<s:Group x="10" y="10" width="95%" height="95%">
					<mx:Form width="100%" height="100%" >
						<mx:FormItem label="Player colors">
							<s:HGroup>
								<mx:ColorPicker id="PLAYER_1_COLOR" toolTip="Player 1's Color" 
												
												creationComplete="PLAYER_1_COLOR.selectedColor = 
												settings.getValue(SCodes.PLAYER_1_COLOR) as uint;" 
												
												change="setSetting(SCodes.PLAYER_1_COLOR,event.target.selectedColor);"/>
								<mx:ColorPicker id="PLAYER_2_COLOR" toolTip="Player 2's Color" 
												
												creationComplete="PLAYER_2_COLOR.selectedColor = 
												settings.getValue(SCodes.PLAYER_2_COLOR) as uint;"
												
												change="setSetting(SCodes.PLAYER_2_COLOR,event.target.selectedColor);"/>
							</s:HGroup>
						</mx:FormItem>
						<mx:FormItem label="Default font">
							<s:ComboBox id="DEFAULT_FONT" width="106" height="24" toolTip="Select Font" 
											
										fontFamily="{DEFAULT_FONT.selectedItem as String}"
										
										creationComplete="DEFAULT_FONT.selectedItem = settings.getValue(SCodes.DEFAULT_FONT) as String"
										
										change="setSetting(SCodes.DEFAULT_FONT, DEFAULT_FONT.selectedItem);">
								<s:dataProvider>
									<mx:ArrayCollection id="arrColl" source="{FigFontManager.getAvailableFontFamilies()}">
										<mx:sort><mx:Sort /></mx:sort>
									</mx:ArrayCollection>
								</s:dataProvider>
								<s:itemRenderer>
									<fx:Component>
										<s:ItemRenderer>							
											<s:Label left="5" height="22" width="85" maxDisplayedLines="1" verticalAlign="middle" fontFamily="{data}" toolTip="{data}" text="{data}" />
										</s:ItemRenderer>						
									</fx:Component>					
								</s:itemRenderer>
							</s:ComboBox>
						</mx:FormItem>
					</mx:Form>
				</s:Group>
			</s:NavigatorContent>			
			
			<s:NavigatorContent width="100%" height="100%" label="Whatever" >
				<s:Group x="10" y="10" width="95%" height="95%">
					<mx:Form width="100%" height="100%">
						<mx:FormItem label="Whichever">
						</mx:FormItem>
					</mx:Form>
				</s:Group>
			</s:NavigatorContent>	
		</mx:TabNavigator>
		

</s:TitleWindow>